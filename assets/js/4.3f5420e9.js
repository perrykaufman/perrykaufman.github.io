(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{177:function(e,t,o){"use strict";o.r(t);var r=o(0),i=Object(r.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"git"}},[e._v("Git")]),e._v(" "),o("h2",{attrs:{id:"cheatsheet"}},[e._v("Cheatsheet")]),e._v(" "),o("h3",{attrs:{id:"local-repository"}},[e._v("Local Repository")]),e._v(" "),e._m(0),e._v(" "),o("h3",{attrs:{id:"branching"}},[e._v("Branching")]),e._v(" "),e._m(1),e._v(" "),o("h3",{attrs:{id:"remote-repository"}},[e._v("Remote Repository")]),e._v(" "),e._m(2),e._v(" "),o("h2",{attrs:{id:"resources"}},[e._v("Resources")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Pro Book"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Documentation"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.youtube.com/watch?v=_OZVJpLHUaI&list=PL55RiY5tL51poFMpbva1IqfO-pylwSNsN",target:"_blank",rel:"noopener noreferrer"}},[e._v("Academind Git YouTube Tutorials"),o("OutboundLink")],1)])])])},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ul",[o("li",[o("p",[o("strong",[e._v("Stage")])]),e._v(" "),o("p",[o("code",[e._v("git add <file>")])]),e._v(" "),o("p",[e._v("Stage specified files.")]),e._v(" "),o("ul",[o("li",[e._v("If a "),o("strong",[e._v("period(.)")]),e._v(" is specified, all changes are staged.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Unstage")])]),e._v(" "),o("p",[o("code",[e._v("git reset HEAD <file>")])]),e._v(" "),o("p",[e._v("Unstage specified files.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Unmodify")])]),e._v(" "),o("p",[o("code",[e._v("git checkout -- <file>")])]),e._v(" "),o("p",[e._v("Reset a file to the previous commit.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Commit")])]),e._v(" "),o("p",[o("code",[e._v('git commit -a -m "<message>"')])]),e._v(" "),o("p",[e._v("Commit new changes to the local repository.")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("-a")]),e._v(" stages modified files (but not new files).")]),e._v(" "),o("li",[o("strong",[e._v("-m")]),e._v(" allows the commit message to be specified.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Amend Commit")])]),e._v(" "),o("p",[o("code",[e._v("git commit --amend")])]),e._v(" "),o("p",[e._v("Add staged changes to previous commit.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Undo Commit(s)")])]),e._v(" "),o("p",[o("code",[e._v("git reset --hard <commit>")])]),e._v(" "),o("p",[e._v("Resets working tree, index, and head to specified commit.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Status")])]),e._v(" "),o("p",[o("code",[e._v("git status")])]),e._v(" "),o("p",[e._v("Shows the working tree status.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Commit History")])]),e._v(" "),o("p",[o("code",[e._v("git log")])]),e._v(" "),o("p",[e._v("Shows commit history.")])])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ul",[o("li",[o("p",[o("strong",[e._v("Show")])]),e._v(" "),o("p",[o("code",[e._v("git branch -v")])]),e._v(" "),o("p",[e._v("Lists all branchs.")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("-v")]),e._v(" shows last commit for each branch.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Create")])]),e._v(" "),o("p",[o("code",[e._v("git branch <branch>")])]),e._v(" "),o("p",[e._v("Create a new branch.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Create and Checkout")])]),e._v(" "),o("p",[o("code",[e._v("git checkout -b <branch>")])]),e._v(" "),o("p",[e._v("Create a and switch to a new branch.")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("-b")]),e._v(" specifies branch creation.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Checkout")])]),e._v(" "),o("p",[o("code",[e._v("git checkout <branch>")])]),e._v(" "),o("p",[e._v("Swtich to a specified branch.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Delete")])]),e._v(" "),o("p",[o("code",[e._v("git branch -d <branch>")])]),e._v(" "),o("p",[e._v("Delete specified branch.")]),e._v(" "),o("ul",[o("li",[e._v("Will only delete if work has been merged.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Merge")])]),e._v(" "),o("p",[o("code",[e._v("git merge <branch>")])]),e._v(" "),o("p",[e._v("Merge a specified branch current branch.")]),e._v(" "),o("ul",[o("li",[e._v("In the event of a "),o("strong",[e._v("merge conflict")]),e._v(", each conflict should be resolved and then the file staged. When all files are staged, a commit will finalize the merge.")])])])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ul",[o("li",[o("p",[o("strong",[e._v("Clone")])]),e._v(" "),o("p",[o("code",[e._v("git clone <url>")])]),e._v(" "),o("p",[e._v("Create a copy of a remote repository.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Show")])]),e._v(" "),o("p",[o("code",[e._v("git remote -v")])]),e._v(" "),o("p",[e._v("Shows existing remote repositories.")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("-v")]),e._v(" shows remote urls.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Fetch")])]),e._v(" "),o("p",[o("code",[e._v("git fetch <remote>")])]),e._v(" "),o("p",[e._v("Fetchs new data from remote repository to local repository.")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Pull")])]),e._v(" "),o("p",[o("code",[e._v("git pull <repository> <branch>")])]),e._v(" "),o("p",[e._v("Fetch remote repository and merge with local branch.")]),e._v(" "),o("ul",[o("li",[e._v("The repository and branch default to origin and master respectively.")])])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Push")])]),e._v(" "),o("p",[o("code",[e._v("git push <repository> <branch>")])]),e._v(" "),o("p",[e._v("Push changes to remote repository.")]),e._v(" "),o("ul",[o("li",[e._v("The repository and branch default to origin and master respectively.")])])])])}],!1,null,null,null);t.default=i.exports}}]);